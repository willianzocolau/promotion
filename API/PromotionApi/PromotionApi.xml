<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PromotionApi</name>
    </assembly>
    <members>
        <member name="M:PromotionApi.Controllers.AuthController.RegisterAsync(System.String,PromotionApi.Models.RegisterUserBody)">
            <summary>
            Register a new user
            </summary>
            <remarks>
            Sample request:
            
                POST /register
                {
                    "nickname": "Nickname",
                    "name": "Name Lastname"
                    "cpf": "01234567890"
                }
                
            </remarks>
            <param name="authorization">Basic Auth format</param>
            <param name="registerUserData">Register information</param>
            <returns>Token</returns>
            <response code="200">Returns the token</response>
            <response code="400">If invalid authorization, invalid json, invalid email, invalid password, invalid nickname, invalid name, invalid cpf, already used email, or already used nickname</response>
        </member>
        <member name="M:PromotionApi.Controllers.AuthController.LoginAsync(System.String)">
            <summary>
            Login with a registered user
            </summary>
            <param name="authorization">Basic Auth format</param>
            <returns>Token and user information</returns>
            <response code="200">Returns the token and user information</response>
            <response code="400">If invalid authorization</response>
            <response code="404">If wrong email or password</response>
        </member>
        <member name="M:PromotionApi.Controllers.AuthController.ExtendAsync(System.String)">
            <summary>
            Extend the login
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <returns>Token</returns>
            <response code="200">Returns the new token</response>
            <response code="400">If invalid authorization</response>
            <response code="404">If token not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.AuthController.LogoutAsync(System.String)">
            <summary>
            Logout (invalidate a token)
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <response code="200">Sucess, token invalidated (doesn't check if it was valid)</response>
            <response code="400">If invalid authorization</response>
        </member>
        <member name="M:PromotionApi.Controllers.AuthController.ResetAsync(PromotionApi.Models.ResetPasswordBody)">
            <summary>
            Initiate the password reset process for a specific user
            </summary>
            <param name="resetPasswordData">Required information to reset the password from a specific user</param>
            <response code="200">Success, email sent to the specified user with the code to change their password</response>
            <response code="400">If invalid email</response>
            <response code="404">If email not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.AuthController.ChangeAsync(PromotionApi.Models.ChangePasswordBody,System.String)">
            <summary>
            Change the password for a specific user
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="changePasswordData">Information to change the password</param>
            <remarks>
            Two ways of changing the password (information needed):
            - (With Authorization header) New password, and old password
            - (Without Authorization header) New password, email, and reset code
            </remarks>
            <response code="200">Success, password changed</response>
            <response code="400">If invalid new password, invalid old password, invalid reset code, invalid email, or old password and reset code provided</response>
            <response code="404">If token not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.GetOrdersAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Search orders
            </summary>
            <remarks>
            The user needs permission to administrate the orders, otherwise the user id parameter will be auto filled.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="limit">Max amount of orders that should be returned (must be a value between [1,100])</param>
            <param name="afterId">Id of the order that will be before the first object returned (used to paginate)</param>
            <param name="userId">User id that made the order</param>
            <param name="storeId">Store id that the promotion related to the order is from</param>
            <param name="promotionId">Promotion id related to the order</param>
            <param name="approved">If the orders should be approved or not</param>
            <returns>List of orders</returns>
            <response code="200">Returns list of orders that match the parameters</response>
            <response code="400">If invalid authorization, or invalid limit</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no order matchs the parameters</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.AddOrderAsync(System.String,PromotionApi.Models.AddOrderBody)">
            <summary>
            Register order
            </summary>
            <remarks>
            The authorization token needs to be one from a store.
            </remarks>
            <param name="authorization">Bearer Auth format (store)</param>
            <param name="orderData">Data related to the order to create</param>
            <response code="200">Success, returns Order</response>
            <response code="400">If invalid authorization, or promotion not from your store</response>
            <response code="401">If token is invalid</response>
            <response code="404">If promotion is not found, or user is not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.ApproveOrderAsync(System.String,System.Int64)">
            <summary>
            Approve order and distribute credits (cashback)
            </summary>
            <remarks>
            Requires permission to approve orders.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Order id</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, already approved, or linked promotion without cashback percentage</response>
            <response code="401">If token is invalid, or no permission to approve</response>
            <response code="404">If order is not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.DisapproveOrderAsync(System.String,System.Int64)">
            <summary>
            Disappove order and remove the distributed credits (cashback)
            </summary>
            <remarks>
            Requires permission to disapprove orders.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Order id</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, or not approved</response>
            <response code="401">If token is invalid, or no permission to approve</response>
            <response code="404">If order is not found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.DeleteAsync(System.String,System.Int64)">
            <summary>
            Delete order
            </summary>
            <remarks>
            Requires permission to delete orders.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Order id</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid, or no permission to delete</response>
            <response code="404">If no order is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.VoteAsync(System.String,System.Int64,PromotionApi.Models.VoteBody)">
            <summary>
            Vote for order (upvote/downvote)
            </summary>
            <remarks>
            Requires to be the one that did the order.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Order id</param>
            <param name="voteData">Data needed to add the vote</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, already voted, or comment is too long</response>
            <response code="401">If token is invalid, or order user id and token user id don't match</response>
            <response code="404">If no order is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.OrderController.AnswerAsync(System.String,System.Int64,PromotionApi.Models.AnswerBody)">
            <summary>
            Answer a vote (upvote/downvote)
            </summary>
            <remarks>
            Requires to be the one that posted the promotion.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Order id</param>
            <param name="answerData">Data needed to add the reply</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, already answered, or comment is too long</response>
            <response code="401">If token is invalid, or promotion user id and token user id don't match</response>
            <response code="404">If no order is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.PromotionController.GetPromotionsAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Search promotions
            </summary>
            <remarks>
            Order by requires specific values, check them at the parameter.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="limit">Max amount of promotions that should be returned (must be a value between [1,100])</param>
            <param name="afterId">Id of the promotion that will be before the first object returned (used to paginate)</param>
            <param name="userId">User id that posted the promotion</param>
            <param name="storeId">Store id that the promotion is related to</param>
            <param name="stateId">State id that the promotion is located</param>
            <param name="priceLessThan">Promotion price will be less than this value</param>
            <param name="priceGreaterThan">Promotion price will be greater than this value</param>
            <param name="name">Promotion name or part of it</param>
            <param name="orderBy">Order results by (valid values: REGISTERDATE_DESC (default), REGISTERDATE_ASC, PRICE_DESC, PRICE_ASC, EXPIREDATE_DESC, EXPIREDATE_ASC)</param>
            <returns>List of promotions</returns>
            <response code="200">Returns list of promotions that match the parameters</response>
            <response code="400">If invalid authorization, invalid limit, or invalid order by</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no promotion is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.PromotionController.RegisterAsync(System.String,PromotionApi.Models.RegisterPromotionBody)">
            <summary>
            Register a promotion
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="promotionData">Data related to the promotion to create</param>
            <returns>Promotion</returns>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, invalid name, invalid price, invalid image url, or invalid state id</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.PromotionController.GetAsync(System.String,System.Int64)">
            <summary>
            Get promotion information by id
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Promotion id</param>
            <returns>Promotion</returns>
            <response code="200">Returns promotion with votes</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no promotion is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.PromotionController.DeleteAsync(System.String,System.Int64)">
            <summary>
            Delete promotion
            </summary>
            <remarks>
            Requires the owner or permission to delete promotions from other users.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Promotion id</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid, or no permission to delete</response>
            <response code="404">If no promotion is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.PromotionController.GetOrdersAsync(System.String,System.Int64)">
            <summary>
            Get orders from a promotion
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Promotion id</param>
            <returns>Promotion Orders</returns>
            <response code="200">Returns the orders of a promotion with users (without seller profile)</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid, or not your promotion</response>
            <response code="404">If no promotion is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.StateController.GetAllAsync(System.String)">
            <summary>
            Get all states
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <returns>List of states</returns>
            <response code="200">Returns list of states</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.StateController.GetAsync(System.String,System.Int64)">
            <summary>
            Get state with the specific id
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">State id</param>
            <returns>State information</returns>
            <response code="200">Returns state information</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no state with this id is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.GetOwnAsync(System.String)">
            <summary>
            Get your own user information
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <returns>User's own information</returns>
            <response code="200">Returns the user's own information</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.SearchAsync(System.String,System.String)">
            <summary>
            Search users that contain the text
            </summary>
            <remarks>
            If there's an exact match, it'll be the first result.
            It'll only return 10 users at maximum.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="nickname">Part or exact nickname to search</param>
            <returns>List of users that match the search</returns>
            <response code="200">Returns a list with users that match the search</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no match is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.GetAsync(System.String,System.Int64)">
            <summary>
            Return the minimal user information from the specific id
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">User id to get the information from</param>
            <returns>User information</returns>
            <response code="200">Returns the user information related with the id</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
            <response code="404">If no user with that id is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.EditAsync(System.String,PromotionApi.Models.EditUserBody)">
            <summary>
            Edit your own user information
            </summary>
            <remarks>
            Just include in <paramref name="editUserData"/> what you are going to edit.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="editUserData">Information to edit from this user</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, invalid name, invalid cpf, invalid telephone, invalid cellphone, invalid image url, invalid nickname, or already used nickname</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.GetOwnWishListAsync(System.String)">
            <summary>
            Get your own user wishlist
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <returns>User's own wishlist</returns>
            <response code="200">Returns user's own wishlist</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.AddWishItemAsync(System.String,PromotionApi.Models.WishlistItemBody)">
            <summary>
            Add item to wishlist
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="wishlistItemData">Item information to add to wishlist</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization, invalid item name, or item already exists</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.GetOwnWishListAsync(System.String,System.Int64)">
            <summary>
            Get wishlist item
            </summary>
            <remarks>
            Requires the user to be the owner of this wishlist item.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Wishlist item id</param>
            <returns>Wishlist item</returns>
            <response code="200">Returns a wishlist item</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid, or item isn't from this user</response>
            <response code="404">If no item with this id is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.DeleteWishItemAsync(System.String,System.Int64,PromotionApi.Models.WishlistItemBody)">
            <summary>
            Delete wishlist item
            </summary>
            <remarks>
            Requires the user to be the owner of this wishlist item.
            </remarks>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Wishlist item id</param>
            <param name="wishlistItemData">Item information to delete from wishlist</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid, or item isn't from this user</response>
            <response code="404">If no item with this id is found</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.GetOwnMatchsAsync(System.String)">
            <summary>
            Get your own user matchs
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <returns>User's own matchs</returns>
            <response code="200">Returns user's own matchs</response>
            <response code="400">If invalid authorization</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:PromotionApi.Controllers.UserController.PatchMatchItemAsync(System.String,System.Int64)">
            <summary>
            Mark a match as unactive (as read)
            </summary>
            <param name="authorization">Bearer Auth format</param>
            <param name="id">Match id</param>
            <response code="200">Success</response>
            <response code="400">If invalid authorization or invalid match id</response>
            <response code="401">If token is invalid</response>
            <response code="404">If match id is not found or doesn't belong to this user</response>
        </member>
    </members>
</doc>
